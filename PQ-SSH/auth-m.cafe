-- manually resolving some sub-cases in the generated proof of auth' (specifying the weak-authentication property)

-- use a lemma
open INV .
	op ?m : -> Nat .
	op ?p : -> Prin .
	op a : -> Prin .
	op b : -> Prin .
	op b2 : -> Prin .
	op c : -> PqCipher .
	op css : -> Suites .
	op css2 : -> Suites .
	op k : -> EcSecretK .
	op k' : -> PqSecretK .
	op n : -> Nat .
	op n2 : -> Nat .
	op pk2 : -> EcPublicK .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> EcSecretK .
	op r5 : -> PqSecretK .
	op r6 : -> Version .
	op r7 : -> Version .
	op r8 : -> Suites .
	op r9 : -> Suites .
	op s : -> Sys .
	op sign : -> Data .
	op v : -> Version .
	op v2 : -> Version .
	eq (r4 \in usecret(s)) = false .
	eq (r5 \in usecret(s)) = false .
	eq (kexInitM(r1,r3,r2,r9) \in nw(s)) = true .
	eq (kexInitM(r2,r2,r3,r8) \in nw(s)) = true .
	eq a = r2 .
	eq b = r3 .
	eq k = r4 .
	eq k' = r5 .
	eq (r2 = intru) = false .
	eq (r3 = intru) = false .
	eq sign = sign(priK(r3),h((v || v2 || css || css2 || pubK(r3) || ecPublic(r4) || keygen(r5) || pk2 || c || (r4 | ecSecret(pk2)) || decaps(c,r5)))) .
	eq time(s) = n .
	eq (r5 \in leakscr(s)) = false .
	eq (priK(r3) \in' leakscr(s)) = false .
	eq (pqSecret(c) \in leakscr(s)) = false .
	eq (decaps(c,r5) \in leakscr(s)) = false .
	eq (hbrIniM(r2,r2,r3,(ecPublic(r4) || keygen(r5)),n) \in nw(s)) = false .
	eq (hbrRepM(b2,r3,r2,(pubK(r3) || pk2 || c || sign(priK(r3),h((v || v2 || css || css2 || pubK(r3) || ecPublic(r4) || keygen(r5) || pk2 || c || (r4 | ecSecret(pk2)) || decaps(c,r5))))),n2) \in nw(s)) = true .
	eq (hbrRepM(r3,r3,?p,(pubK(r3) || pk2 || c || sign(priK(r3),h((v || v2 || css || css2 || pubK(r3) || ecPublic(r4) || keygen(r5) || pk2 || c || (r4 | ecSecret(pk2)) || decaps(c,r5))))),?m) \in nw(s)) = false .
  red inv17(s,b2,a,b,v,v2,css,css2,k,k',pk2,c,n2)
	implies auth'(s,b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) implies auth'(cHbrInit(s,r1,r2,r3,r4,r5,r6,r7,r8,r9),b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) .
close

-- use a lemma
open INV .
	op ?m : -> Nat .
	op ?p : -> Prin .
	op a : -> Prin .
	op b : -> Prin .
	op b2 : -> Prin .
	op c : -> PqCipher .
	op css : -> Suites .
	op css2 : -> Suites .
	op k : -> EcSecretK .
	op k' : -> PqSecretK .
	op n : -> Nat .
	op n2 : -> Nat .
	op pk2 : -> EcPublicK .
	op r1 : -> Prin .
	op r2 : -> Prin .
	op r3 : -> PubKey .
	op r4 : -> EcPublicK .
	op r5 : -> PqCipher .
	op r6 : -> Data .
	op s : -> Sys .
	op sign : -> Data .
	op v : -> Version .
	op v2 : -> Version .
	eq (r3 \in knl(s)) = true .
	eq (r4 \in knl(s)) = true .
	eq (r5 \in knl(s)) = true .
	eq (r6 \in knl(s)) = true .
	eq a = r2 .
	eq b = r1 .
	eq b2 = intru .
	eq c = r5 .
	eq sign = r6 .
	eq (r1 = intru) = false .
	eq (r2 = intru) = false .
	eq r3 = pubK(r1) .
	eq (pubK(r1) \in knl(s)) = true .
	eq r6 = sign(priK(r1),h((v || v2 || css || css2 || pubK(r1) || ecPublic(k) || keygen(k') || pk2 || r5 || (k | ecSecret(pk2)) || decaps(r5,k')))) .
	eq (sign(priK(r1),h((v || v2 || css || css2 || pubK(r1) || ecPublic(k) || keygen(k') || pk2 || r5 || (k | ecSecret(pk2)) || decaps(r5,k')))) \in knl(s)) = true .
	eq time(s) = n2 .
	eq (k' \in leakscr(s)) = false .
	eq ecSecret(r4) = ecSecret(pk2) .
	eq (priK(r1) \in' leakscr(s)) = false .
	eq (pqSecret(r5) \in leakscr(s)) = false .
	eq (decaps(r5,k') \in leakscr(s)) = false .
	eq (hbrIniM(r2,r2,r1,(ecPublic(k) || keygen(k')),n) \in nw(s)) = true .
	eq (hbrRepM(intru,r1,r2,(pubK(r1) || pk2 || r5 || sign(priK(r1),h((v || v2 || css || css2 || pubK(r1) || ecPublic(k) || keygen(k') || pk2 || r5 || (k | ecSecret(pk2)) || decaps(r5,k'))))),n2) \in nw(s)) = false .
	eq (hbrRepM(r1,r1,?p,(pubK(r1) || pk2 || r5 || sign(priK(r1),h((v || v2 || css || css2 || pubK(r1) || ecPublic(k) || keygen(k') || pk2 || r5 || (k | ecSecret(pk2)) || decaps(r5,k'))))),?m) \in nw(s)) = false .
	red inv16(s,a,b,?p,v,v2,css,css2,k,k',pk2,c,?m)
  implies auth'(s,b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) implies auth'(fkHbrReply(s,r1,r2,r3,r4,r5,r6),b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) .
close

-- choose a suitable witness
open INV .
	op ?m : -> Nat .
	op ?p : -> Prin .
	op a : -> Prin .
	op b : -> Prin .
	op b2 : -> Prin .
	op c : -> PqCipher .
	op css : -> Suites .
	op css2 : -> Suites .
	op k : -> EcSecretK .
	op k' : -> PqSecretK .
	op n : -> Nat .
	op n2 : -> Nat .
	op pk2 : -> EcPublicK .
	op r1 : -> Prin .
	op r10 : -> EcPublicK .
	op r11 : -> PqPublicK .
	op r12 : -> Nat .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> EcSecretK .
	op r5 : -> PqSecretK .
	op r6 : -> Version .
	op r7 : -> Version .
	op r8 : -> Suites .
	op r9 : -> Suites .
	op s : -> Sys .
	op sign : -> Data .
	op v : -> Version .
	op v2 : -> Version .
	eq (r4 \in usecret(s)) = false .
	eq (r5 \in usecret(s)) = false .
	eq (kexInitM(r3,r3,r2,r9) \in nw(s)) = true .
	eq (hbrIniM(r1,r2,r3,(r10 || r11),r12) \in nw(s)) = true .
	eq a = r2 .
	eq b = r3 .
	eq b2 = r3 .
	eq (r2 = intru) = false .
	eq (r3 = intru) = false .
	eq ?p = r2 .
	eq c = encapsC(r11,r5) .
	eq ecSecret(pk2) = r4 .
	eq sign = sign(priK(r3),h((r6 || r7 || r8 || r9 || pubK(r3) || r10 || r11 || ecPublic(r4) || encapsC(r11,r5) || (r4 | ecSecret(r10)) || (pqSecret(r11) & r5)))) .
	eq css = r8 .
	eq css2 = r9 .
	eq v = r6 .
	eq v2 = r7 .
	eq ecSecret(r10) = k .
	eq pqSecret(r11) = k' .
	eq time(s) = n2 .
	eq (?m = n2) = false .
	eq (k' \in leakscr(s)) = false .
	eq (r5 \in leakscr(s)) = false .
	eq (priK(r3) \in' leakscr(s)) = false .
	eq ((k' & r5) \in leakscr(s)) = false .
	eq (hbrIniM(r2,r2,r3,(ecPublic(k) || keygen(k')),n) \in nw(s)) = true .
	eq (hbrRepM(r3,r3,r2,(pubK(r3) || pk2 || encapsC(r11,r5) || sign(priK(r3),h((r6 || r7 || r8 || r9 || pubK(r3) || r10 || r11 || ecPublic(r4) || encapsC(r11,r5) || (k | r4) || (k' & r5))))),?m) \in nw(s)) = false .
	eq (hbrRepM(r3,r3,r2,(pubK(r3) || pk2 || encapsC(r11,r5) || sign(priK(r3),h((r6 || r7 || r8 || r9 || pubK(r3) || r10 || r11 || ecPublic(r4) || encapsC(r11,r5) || (k | r4) || (k' & r5))))),n2) \in nw(s)) = false .
	-- red auth'(s,b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) implies auth'(sHbrReply(s,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12),b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) .
-- the witness ?m in the successor state will be n2 (or time(s))
	red auth'(s,b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) implies auth'(sHbrReply(s,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12),b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,n2) .
close

-- choose a suitable witness
open INV .
	op ?m : -> Nat .
	op ?p : -> Prin .
	op a : -> Prin .
	op b : -> Prin .
	op b2 : -> Prin .
	op c : -> PqCipher .
	op css : -> Suites .
	op css2 : -> Suites .
	op k : -> EcSecretK .
	op k' : -> PqSecretK .
	op n : -> Nat .
	op n2 : -> Nat .
	op pk2 : -> EcPublicK .
	op r1 : -> Prin .
	op r10 : -> EcPublicK .
	op r11 : -> PqPublicK .
	op r12 : -> Nat .
	op r2 : -> Prin .
	op r3 : -> Prin .
	op r4 : -> EcSecretK .
	op r5 : -> PqSecretK .
	op r6 : -> Version .
	op r7 : -> Version .
	op r8 : -> Suites .
	op r9 : -> Suites .
	op s : -> Sys .
	op sign : -> Data .
	op v : -> Version .
	op v2 : -> Version .
	eq (r4 \in usecret(s)) = false .
	eq (r5 \in usecret(s)) = false .
	eq (kexInitM(r3,r3,r2,r9) \in nw(s)) = true .
	eq (hbrIniM(r1,r2,r3,(r10 || r11),r12) \in nw(s)) = true .
	eq a = r2 .
	eq b = r3 .
	eq b2 = r3 .
	eq (r2 = intru) = false .
	eq (r3 = intru) = false .
	eq (?p = r2) = false .
	eq c = encapsC(r11,r5) .
	eq ecSecret(pk2) = r4 .
	eq sign = sign(priK(r3),h((r6 || r7 || r8 || r9 || pubK(r3) || r10 || r11 || ecPublic(r4) || encapsC(r11,r5) || (r4 | ecSecret(r10)) || (pqSecret(r11) & r5)))) .
	eq css = r8 .
	eq css2 = r9 .
	eq v = r6 .
	eq v2 = r7 .
	eq ecSecret(r10) = k .
	eq pqSecret(r11) = k' .
	eq time(s) = n2 .
	eq (k' \in leakscr(s)) = false .
	eq (r5 \in leakscr(s)) = false .
	eq (priK(r3) \in' leakscr(s)) = false .
	eq ((k' & r5) \in leakscr(s)) = false .
	eq (hbrIniM(r2,r2,r3,(ecPublic(k) || keygen(k')),n) \in nw(s)) = true .
	eq (hbrRepM(r3,r3,?p,(pubK(r3) || pk2 || encapsC(r11,r5) || sign(priK(r3),h((r6 || r7 || r8 || r9 || pubK(r3) || r10 || r11 || ecPublic(r4) || encapsC(r11,r5) || (k | r4) || (k' & r5))))),?m) \in nw(s)) = false .
	eq (hbrRepM(r3,r3,r2,(pubK(r3) || pk2 || encapsC(r11,r5) || sign(priK(r3),h((r6 || r7 || r8 || r9 || pubK(r3) || r10 || r11 || ecPublic(r4) || encapsC(r11,r5) || (k | r4) || (k' & r5))))),n2) \in nw(s)) = false .
	-- red auth'(s,b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) implies auth'(sHbrReply(s,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12),b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) .
-- the witness ?p in the successor state will be r2, and 
-- the witness ?m in the successor state will be n2 (or time(s))
	red auth'(s,b2,a,b,?p,v,v2,css,css2,k,k',pk2,c,sign,n,n2,?m) implies auth'(sHbrReply(s,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12),b2,a,b,r2,v,v2,css,css2,k,k',pk2,c,sign,n,n2,n2) .
close